Your hour tracking web app is a great project idea, and you're on the right track considering the integration with Google Sheets for data storage and visualization. Here's a step-by-step approach you can take:

1. **Frontend Development (HTML & CSS):**
   - Design your web page with HTML, creating forms for users to input their first and last names, and buttons for clocking in and out.
   - Use CSS for styling the page to make it user-friendly and visually appealing.

2. **JavaScript for Frontend Logic:**
   - Use JavaScript to handle user interactions, such as clicking the clock in/out buttons.
   - Implement the logic to round the time to the nearest 5 minutes in JavaScript.

3. **Backend Integration with Google Sheets (Google App Script):**
   - Google App Script (GAS) is a JavaScript-based language that lets you automate tasks across Google products. You can use it to link your web app to a Google Sheet.
   - GAS can be used to write functions that add, read, or modify data in your Google Sheets based on the user's actions.

4. **How to Use Google App Script:**
   - Create a new script in Google Apps Script Editor (linked to your Google Sheet).
   - Write functions in GAS to interact with the Google Sheet, like adding a new row with the timestamp and user details whenever a user clocks in or out.
   - Use the GAS 'doPost()' or 'doGet()' functions to receive requests from your frontend.

5. **Connecting Frontend with Google App Script:**
   - In your JavaScript code, make AJAX calls to the Google App Script's URL (which you get after publishing your script as a web app) to send data from your frontend to the script.

6. **Displaying Recent Actions Log:**
   - Use GAS to retrieve recent log entries from your Google Sheet.
   - Send this data back to the frontend and display it dynamically using JavaScript.

7. **Security and Access Control:**
   - Ensure that only authorized users can access or modify data in your Google Sheet.
   - Implement basic security measures in your web app, like validating user inputs.

8. **Testing and Debugging:**
   - Test all functionalities extensively: user input, time rounding, data storage and retrieval, and the log display.
   - Debug any issues using the console in your web browser and the GAS editor.

9. **Deployment:**
   - Once everything is working as intended, deploy your web app. You can host your HTML, CSS, and JavaScript files on a server or use platforms like GitHub Pages for simple, static web apps.

10. **Documentation and Maintenance:**
   - Keep documentation of your code and functionalities for future reference or updates.
   - Regularly update your app for security and functionality improvements.

By following these steps, you can create a functional hour tracking web app integrated with Google Sheets. If you're new to Google App Script, there are many resources and tutorials available online that can guide you through its specifics.